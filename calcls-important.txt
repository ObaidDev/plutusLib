trip :

{
  "intervals_ttl": 31536000,
  "update_delay": 30,
  "update_period": 7776000,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "",
  "validate_interval": "",
  "name": "trips",
  "selectors": [
    {
      "expression": "$position.speed>0 || $engine.ignition.status || $segment.vehicle.mileage>0",
      "max_inactive": 120,
      "max_messages_time_diff": 300,
      "merge_message_after": true,
      "merge_message_before": true,
      "merge_unknown": true,
      "method": "boolean",
      "min_duration": 60,
      "type": "expression"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "expression": "position.speed",
      "method": "maximum",
      "name": "max_speed",
      "type": "expression"
    },
    {
      "expression": "mileage()",
      "method": "summary",
      "name": "distance",
      "type": "expression"
    },
    {
      "expression": "segment.vehicle.mileage",
      "method": "summary",
      "name": "distance_can",
      "type": "expression"
    },
    {
      "name": "route",
      "type": "route"
    },
    {
      "expression": "(distance*3600)/duration",
      "name": "avg_speed",
      "type": "interval"
    },
    {
      "method": "first",
      "name": "position_satellites",
      "parameter": "position.satellites",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "fuel_volume",
      "parameter": "can.fuel.volume",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "device_id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "engine_rpm",
      "parameter": "protocol.id",
      "type": "parameter"
    },
    {
      "expression": "duration - stop_duration.duration",
      "method": "first",
      "name": "idl_time",
      "type": "expression"
    },
    {
      "method": "each",
      "name": "overspeeding",
      "parameter": "overspeeding.speed",
      "type": "parameter"
    },
    {
      "method": "each",
      "name": "overspeedingStatus",
      "parameter": "overspeeding.status",
      "type": "parameter"
    },
    {
      "method": "last",
      "name": "last_address",
      "parameter": "wialon.address",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "vehicle_mileage",
      "parameter": "vehicle.mileage",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "tracker_counted_mileage",
      "parameter": "can.tracker.counted.mileage",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "can_tracker_counted_fuel_consumed",
      "parameter": "can.tracker.counted.fuel.consumed",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "can_fuel_consumed",
      "parameter": "can.fuel.consumed",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "first_address",
      "parameter": "wialon.address",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "start_odom",
      "parameter": "vehicle.mileage",
      "type": "parameter"
    },
    {
      "expression": "can.fuel.volume",
      "method": "difference",
      "name": "fuel_used",
      "type": "expression"
    },
    {
      "expression": "(fuel_used * distance) / (-100)",
      "name": "fuel_per_100km",
      "type": "interval"
    },
    {
      "expression": "can.fuel.volume",
      "method": "first",
      "name": "fuel_start",
      "type": "expression"
    },
    {
      "expression": "can.fuel.volume",
      "method": "last",
      "name": "fuel_end",
      "type": "expression"
    },
    {
      "expression": "hour($timestamp)",
      "method": "first",
      "name": "start_hour",
      "type": "expression"
    },
    {
      "expression": "hour($timestamp)",
      "method": "last",
      "name": "end_hour",
      "type": "expression"
    },
    {
      "expression": "minute($timestamp)",
      "method": "first",
      "name": "start_minute",
      "type": "expression"
    },
    {
      "expression": "minute($timestamp)",
      "method": "last",
      "name": "end_minute",
      "type": "expression"
    },
    {
      "fields": [
        {
          "name": "latitude",
          "value": "if(exists('position.latitude'), $position.latitude, null)"
        },
        {
          "name": "longitude",
          "value": "if(exists('position.longitude'), $position.longitude, null)"
        },
        {
          "name": "direction",
          "value": "if(exists('position.direction'), $position.direction, null)"
        },
        {
          "name": "address",
          "value": "if(exists('wialon.address'), $wialon.address, null)"
        },
        {
          "name": "rpm",
          "value": "if(exists('can.engine.rpm'), $can.engine.rpm, null)"
        },
        {
          "name": "speed",
          "value": "if(exists('position.speed'), $position.speed, null)"
        },
        {
          "name": "voltage",
          "value": "if(exists('battery.voltage'), $battery.voltage, null)"
        },
        {
          "name": "fuel_volume",
          "value": "if(exists('can.fuel.volume'), $can.fuel.volume, null)"
        },
        {
          "name": "satellites",
          "value": "if(exists('position.satellites'), $position.satellites, null)"
        },
        {
          "name": "engine_temperature",
          "value": "if(exists('can.engine.temperature'), $can.engine.temperature, null)"
        },
        {
          "name": "gsm_signal_level",
          "value": "if(exists('gsm.signal.level'), $gsm.signal.level, null)"
        },
        {
          "name": "powersource_voltage",
          "value": "if(exists('external.powersource.voltage'), $external.powersource.voltage, null)"
        }
      ],
      "name": "position_dataset",
      "type": "dataset"
    }
  ],
  "timezone": "Africa/Casablanca"
}

stop : 

{
  "intervals_ttl": 31536000,
  "update_delay": 10,
  "update_period": 31536000,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "position.speed",
  "validate_interval": "",
  "name": "stops",
  "selectors": [
    {
      "expression": "position.speed<5 && engine.ignition.status == false",
      "method": "boolean",
      "min_active": 1,
      "min_duration": 60,
      "type": "expression"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "name": "route",
      "type": "route"
    },
    {
      "method": "first",
      "name": "device_id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "address",
      "parameter": "wialon.address",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "engine.ignition",
      "parameter": "engine.ignition.status",
      "type": "parameter"
    }
  ],
  "timezone": "UTC"
}



daily total milleage :

{
  "intervals_ttl": 31536000,
  "update_delay": 10,
  "update_period": 86400,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "position.speed>5",
  "validate_interval": "",
  "name": "Daily + total milleage with route",
  "selectors": [
    {
      "expression": "position.speed>5",
      "max_inactive": 180,
      "method": "boolean",
      "type": "expression"
    },
    {
      "split": "day",
      "type": "datetime"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "name": "route",
      "type": "route"
    },
    {
      "expression": "mileage()",
      "method": "summary",
      "name": "mileage",
      "type": "expression"
    },
    {
      "counter": "mileage",
      "name": "daily_mileage",
      "reset_interval": "day",
      "type": "accumulator"
    },
    {
      "counter": "mileage",
      "name": "total_mileage",
      "type": "accumulator"
    },
    {
      "expression": "device.id",
      "method": "first",
      "name": "device_id",
      "type": "expression"
    },
    {
      "expression": "position.speed",
      "method": "maximum",
      "name": "max_speed",
      "type": "expression"
    },
    {
      "expression": "position.speed",
      "method": "average",
      "name": "avg_speed",
      "type": "expression"
    }
  ],
  "timezone": "Africa/Casablanca"
}


Refuel :
{
  "intervals_ttl": 31536000,
  "update_delay": 1,
  "update_period": 86400,
  "update_onchange": false,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "can.fuel.volume",
  "validate_interval": "fuel.delta>3",
  "name": "Refuel",
  "selectors": [
    {
      "expression": "#can.fuel.volume<can.fuel.volume",
      "max_inactive": 90,
      "max_messages_time_diff": 1800,
      "merge_message_before": true,
      "method": "boolean",
      "min_duration": 30,
      "name": "fuel increased",
      "type": "expression"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "method": "first",
      "name": "fuel.before",
      "parameter": "can.fuel.volume",
      "type": "parameter"
    },
    {
      "method": "last",
      "name": "fuel.after",
      "parameter": "can.fuel.volume",
      "type": "parameter"
    },
    {
      "expression": "fuel.after-fuel.before",
      "name": "fuel.delta",
      "type": "interval"
    },
    {
      "method": "first",
      "name": "position.latitude",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "position.longitude",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "can.vehicle.mileage",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "device_id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "address",
      "parameter": "wialon.address",
      "type": "parameter"
    },
    {
      "name": "route",
      "type": "route"
    }
  ],
  "timezone": "UTC",
  "metadata": {}
}

over-speeding : 

{
  "intervals_ttl": 31536000,
  "update_delay": 30,
  "update_period": 864000,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "",
  "validate_interval": "",
  "name": "over-speeding",
  "selectors": [
    {
      "expression": "wialon.speed.limit < position.speed && duration > 0 && distance > 0",
      "method": "boolean",
      "type": "expression"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "expression": "mileage()",
      "method": "summary",
      "name": "distance",
      "type": "expression"
    },
    {
      "expression": "wialon.address",
      "method": "first",
      "name": "first_address",
      "type": "expression"
    },
    {
      "expression": "wialon.address",
      "method": "first",
      "name": "last_address",
      "type": "expression"
    },
    {
      "name": "route",
      "type": "route"
    },
    {
      "method": "first",
      "name": "speed.limit",
      "parameter": "wialon.speed.limit",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "speed",
      "parameter": "position.speed",
      "type": "parameter"
    }
  ],
  "timezone": "UTC"
}


idl :

{
  "intervals_ttl": 31536000,
  "update_delay": 10,
  "update_period": 31536000,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "exists(\"position.speed\")",
  "validate_interval": "",
  "name": "idl detector",
  "selectors": [
    {
      "expression": "position.speed<5 && engine.ignition.status == true",
      "max_inactive": 10,
      "method": "boolean",
      "min_active": 1,
      "min_duration": 60,
      "type": "expression"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "name": "route",
      "type": "route"
    },
    {
      "method": "first",
      "name": "device_id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "reportid",
      "parameter": "origin.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "device__id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "address",
      "parameter": "wialon.address",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "engine.ignition",
      "parameter": "engine.ignition.status",
      "type": "parameter"
    }
  ],
  "timezone": "UTC",
  "metadata": {
    "message": ""
  }
}



fuel_consumption :

{
  "intervals_ttl": 31536000,
  "update_delay": 30,
  "update_period": 864000,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "",
  "validate_interval": "",
  "name": "fuel_consumption",
  "selectors": [
    {
      "expression": "$position.speed>0 && #can.fuel.volume>=can.fuel.volume",
      "max_messages_time_diff": 600,
      "merge_message_after": true,
      "merge_message_before": true,
      "method": "boolean",
      "min_duration": 60,
      "type": "expression"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "expression": "mileage()",
      "method": "summary",
      "name": "distance",
      "type": "expression"
    },
    {
      "expression": "can.fuel.volume",
      "method": "difference",
      "name": "fuel_used",
      "type": "expression"
    },
    {
      "expression": "(fuel_used * distance) / (-100)",
      "name": "fuel_per_100km",
      "type": "interval"
    },
    {
      "expression": "can.fuel.volume",
      "method": "first",
      "name": "fuel_start",
      "type": "expression"
    },
    {
      "expression": "can.fuel.volume",
      "method": "last",
      "name": "fuel_end",
      "type": "expression"
    },
    {
      "expression": "if(#can.fuel.volume<can.fuel.volume , 1 , 0)",
      "method": "last",
      "name": "fuel_is_increased",
      "type": "expression"
    },
    {
      "expression": "if(fuel_is_increased == 1 , fuel_end - fuel_start , 0)",
      "name": "fuel_amount",
      "type": "interval"
    },
    {
      "method": "first",
      "name": "device_id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "start_odom",
      "parameter": "vehicle.mileage",
      "type": "parameter"
    },
    {
      "method": "last",
      "name": "end_odom",
      "parameter": "vehicle.mileage",
      "type": "parameter"
    }
  ],
  "timezone": "UTC",
  "metadata": {}
}



inactive :
{
  "intervals_ttl": 31536000,
  "update_delay": 10,
  "update_period": 31536000,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "position.speed",
  "validate_interval": "",
  "name": "inactive",
  "selectors": [
    {
      "delay_threshold": 60,
      "type": "inactive"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "method": "first",
      "name": "device_id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "address",
      "parameter": "wialon.address",
      "type": "parameter"
    },
    {
      "name": "route",
      "type": "route"
    }
  ],
  "timezone": "UTC",
  "metadata": {}
}

decrease:
{
  "intervals_ttl": 31536000,
  "update_delay": 30,
  "update_period": 864000,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "",
  "validate_interval": "",
  "name": "decrease",
  "selectors": [
    {
      "expression": "#can.fuel.volume>=$can.fuel.volume",
      "max_messages_time_diff": 600,
      "merge_message_after": true,
      "merge_message_before": true,
      "method": "boolean",
      "min_duration": 60,
      "type": "expression"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "expression": "mileage()",
      "method": "summary",
      "name": "distance",
      "type": "expression"
    },
    {
      "expression": "(fuel_used * distance) / (-100)",
      "name": "fuel_per_100km",
      "type": "interval"
    },
    {
      "expression": "can.fuel.volume",
      "method": "first",
      "name": "fuel_start",
      "type": "expression"
    },
    {
      "expression": "can.fuel.volume",
      "method": "last",
      "name": "fuel_end",
      "type": "expression"
    },
    {
      "expression": "if(fuel_is_increased == 1 , fuel_end - fuel_start , 0)",
      "name": "refuel_amount",
      "type": "interval"
    },
    {
      "method": "first",
      "name": "device_id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "start_odom",
      "parameter": "vehicle.mileage",
      "type": "parameter"
    },
    {
      "method": "last",
      "name": "end_odom",
      "parameter": "vehicle.mileage",
      "type": "parameter"
    },
    {
      "expression": "if(fuel_end < fuel_start  , fuel_start  - fuel_end , 0)",
      "name": "fuel_used",
      "type": "interval"
    },
    {
      "method": "first",
      "name": "ignition",
      "parameter": "engine.ignition.status",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "movement",
      "parameter": "movement.status",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "address",
      "parameter": "wialon.address",
      "type": "parameter"
    }
  ],
  "timezone": "UTC"
}



erlay_late :

{
  "intervals_ttl": 31536000,
  "update_delay": 30,
  "update_period": 7776000,
  "update_onchange": true,
  "messages_source": {
    "source": "device"
  },
  "validate_message": "",
  "validate_interval": "",
  "name": "erlay_late",
  "selectors": [
    {
      "expression": "$engine.ignition.status && $position.speed>5",
      "max_inactive": 120,
      "max_messages_time_diff": 300,
      "merge_message_after": true,
      "merge_message_before": true,
      "merge_unknown": true,
      "method": "boolean",
      "min_duration": 60,
      "type": "expression"
    }
  ],
  "intervals_rotate": 0,
  "counters": [
    {
      "method": "first",
      "name": "device_id",
      "parameter": "device.id",
      "type": "parameter"
    },
    {
      "method": "last",
      "name": "last_address",
      "parameter": "wialon.address",
      "type": "parameter"
    },
    {
      "method": "first",
      "name": "first_address",
      "parameter": "wialon.address",
      "type": "parameter"
    },
    {
      "expression": "hour($timestamp)",
      "method": "first",
      "name": "start_hour",
      "type": "expression"
    },
    {
      "expression": "hour($timestamp)",
      "method": "last",
      "name": "end_hour",
      "type": "expression"
    },
    {
      "expression": "minute($timestamp)",
      "method": "first",
      "name": "start_minute",
      "type": "expression"
    },
    {
      "expression": "minute($timestamp)",
      "method": "last",
      "name": "end_minute",
      "type": "expression"
    }
  ],
  "timezone": "Africa/Casablanca"
}